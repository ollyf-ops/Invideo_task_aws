name: 'CI-CD'
on:
  push:
    branches:
      - dev
env:
  CLONE_DIR: /home/ubuntu/sunny/
  continue: false
  time: 30
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#inputs:
#  debug:
#    required: true
#    description: If true, then output debugging information
#    default: true
jobs:
  Ansible_Inventory_check:
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ Running }}
        if: always()

      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Check ansible inventory connectivity
          color: warning
      - name: 'Check ansible inventory connectivity'
        id: Check_ansible_inventory_connectivity
        run: ssh rd_test 'sudo ansible testInstances -m ping'
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Check ansible inventory connectivity
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Check ansible inventory connectivity
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()

  Deployment_Path_Selection:
    needs: [ Ansible_Inventory_check ]
    runs-on: self-hosted
    environment:
      name: Deployment_Path_Selection
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Deployment_Path_Selection
          color: warning

      - name: 'Select deployment path to checkout repo'
        id: Deployment_Path_Selection
        run: ssh rd_test 'cd /home/ubuntu/sunny/ '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}
        env:
          Deployment_Directory_CONTEXT: ${{ toJSON(steps) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Deployment_Path_Selection
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Deployment_Path_Selection
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Checkout_Repo:
    needs: [Deployment_Directory]
    runs-on: self-hosted
    environment:
      name: Checkout_Repo
      url: ${{ steps.create_release.outputs.html_url }}
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Checkout_Repo
          color: warning
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: 'Clone repo in deployment directory'
        id: Checkout_Repo
        if: ${{ steps.Deployment_Directory.outcome == 'success' }} && success()
        shell: bash
        run: |
           if ! [ -d "/home/ubuntu/sunny/Invideo_task_aws" ] ; then
              echo "Directory /home/ubuntu/sunny/Invideo_task_aws does not exists."
              echo "Performing git checkout...";
              cd /home/ubuntu/sunny/;
              sudo git clone git@github.com-repo-Invideo_task_aws:Shashankreddysunkara/Invideo_task_aws.git;
           elif [ -d "/home/ubuntu/sunny/Invideo_task_aws" ] ; then
              echo -e "Directory \"/home/ubuntu/sunny/Invideo_task_aws\" already exists. \n Performing git pull origin dev... \n" ; cd /home/ubuntu/sunny/Invideo_task_aws/ ; sudo git pull origin dev
           else
              exit;
           fi
        continue-on-error: true
        timeout-minutes: ${{ fromJSON(env.time) }}
        env:
          Checkout_Repo_CONTEXT: ${{ toJSON(steps) }}
#        - name: sync Repo
#            uses: repo-sync/github-sync@v2
#            with:
#              source_repo: "git@github.com-repo-Invideo_task_aws:Shashankreddysunkara/Invideo_task_aws.git"
#              source_branch: "dev"
#              destination_branch: "dev"

#      - name: Clone typescript repo
#        continue-on-error: ${{ fromJSON(env.continue) }}
#        timeout-minutes: ${{ fromJSON(env.time) }}
#        uses: actions/checkout@v2
#        with:
#          repository: 'Shashankreddysunkara/Invideo_task_aws'
#          ssh-key: ${{ secrets.DEPLOY_KEY }}
#          ref: autogenerated
#          path: '/home/ubuntu/'

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Checkout_Repo
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Checkout_Repo
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Git_Branch_Checkout:
    needs: [Checkout_Repo]
    if: success()
    environment:
      name: Git_Branch_Checkout
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Git_Branch_Checkout
          color: warning

      - name: 'Checkout git branch'
        id: Checkout_git_branch
        run:  |
          ssh rd_test '
          cd /home/ubuntu/sunny/Invideo_task_aws/
          sudo git checkout dev '
          echo "`git branch`"
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Git_Branch_Checkout
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Git_Branch_Checkout
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Git_Status_Check:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Git_Branch_Checkout]
    environment:
      name: Git_Status_Check
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Git_Status_Check
          color: warning

      - name: 'git status'
        id: git_status
        run: ssh rd_test ' su ubuntu ; cd /home/ubuntu/sunny/Invideo_task_aws/ ; git status '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}
      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Git_Status_Check
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Git_Status_Check
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Git_Diff_Check:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Git_Status_Check]
    environment:
      name: Git_Diff_Check
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Git_Diff_Check
          color: warning

      - name: 'git diff'
        id: git_diff
        run: ssh rd_test 'su ubuntu ; cd /home/ubuntu/sunny/Invideo_task_aws/ ; git diff '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Git_Diff_Check
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Git_Diff_Check
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Git_Pull:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [ Git_Diff_Check ]
    environment:
      name: Git_Pull
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Git_Pull
          color: warning

      - name: "Pull repo"
        id: Pull_repo
        shell: "bash"
        run: |
          ssh rd_test '
          cd /home/ubuntu/sunny/Invideo_task_aws/
          sudo git pull origin dev '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Git_Pull
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Git_Pull
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Git_Branch_Check:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Git_Diff_Check]
    environment:
      name: Git_Branch_Check
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Git_Branch_Check
          color: warning

      - name: 'git branch'
        id: git_branch
        run: ssh rd_test 'cd /home/ubuntu/sunny/Invideo_task_aws/ ; git branch ; echo -e "\n Deploying to production server on branch $GITHUB_REF \n" '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Git_Branch_Check
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Git_Branch_Check
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Deployment:
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Git_Branch_Check]
    environment:
      name: Deployment
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Deployment
          color: warning

      - name: 'Show pwd and make docker-compose deployment'
        id: docker_compose_deployment
        run: ssh rd_test 'cd /home/ubuntu/sunny/Invideo_task_aws/ ; echo -e " Current path of working dir is " ; pwd '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Deployment
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Deployment
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_KEY }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  Terraform_init:
    name: 'Terraform_init'
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Deployment]
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Terraform_init
          color: warning

      - name: 'Terraform init'
        id: Terraform_init
        run: ssh rd_test 'su ubuntu ; cd /home/ubuntu/sunny/Invideo_task_aws/ ; echo "\n Setting up provisioner \n " ; sudo terraform init '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Terraform_init
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Terraform_init
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Terraform_plan:
    name: 'Terraform_plan'
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Terraform_init]
    environment:
      name: Terraform_plan
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Terraform_plan
          color: warning

      - name: 'terraform plan'
        id: terraform_plan
        run: |
           cd /home/ubuntu/sunny/Invideo_task_aws/
           echo -e "\n\n"
           pwd
           echo -e "\n\n"
           whoami
           cd /home/ubuntu/sunny/Invideo_task_aws/
           sudo terraform plan -out=aws.tfplan -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }}"
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Terraform_plan
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Terraform_plan
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Terraform_apply:
    name: 'Terraform_apply'
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [Terraform_plan]
    environment:
      name: Terraform_apply
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Terraform_apply
          color: warning

      - name: 'terraform apply for Launching the EC2 cluster, rds, LB, SG, VPC, SUBNETS, and NAT'
        id: terraform_apply
        run: ssh rd_test 'cd /home/ubuntu/sunny/Invideo_task_aws/ ; sudo terraform apply aws.tfplan '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Terraform_apply
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Terraform_apply
          color: danger
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
  Terraform_Destroy:
    name: 'Terraform_Destroy'
    if: ${{ github.ref == 'refs/heads/dev' }}
    needs: [ Terraform_apply ]
    environment:
      name: Terraform_Destroy
    runs-on: self-hosted
    steps:
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: Notify slack success
        if: success()
        id: slack # IMPORTANT: reference this step ID value in future Slack steps
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: STARTING - Terraform_Destroy
          color: warning
      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
      - name: 'terraform destroy for destroying the EC2 cluster, rds, LB, SG, VPC, SUBNETS, and NAT'
        id: terraform_destroy
        if: ${{ steps.terraform_apply.outcome == 'failure' }}
        run: ssh rd_test 'cd /home/ubuntu/sunny/Invideo_task_aws/ ; sudo terraform destroy -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" -var "aws_secret_key=${{ secrets.AWS_SECRET_KEY }} '
        continue-on-error: ${{ fromJSON(env.continue) }}
        timeout-minutes: ${{ fromJSON(env.time) }}

      - name: Notify slack success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: aws
          status: SUCCESS - Terraform_Destroy
          color: good
      - name: Notify slack fail
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: aws
          status: FAILED - Terraform_Destroy
          color: danger

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#github-actions-pipeline-status'
        if: always()
#workflows:
#  test-and-deploy:
#    jobs:
#      - Ansible_Inventory_check
#      - slack/on-hold:
#          context: slack-secrets
#          filters:
#            branches:
#              only: dev
#          requires:
#            - Ansible_Inventory_check
#      - pause_workflow:
#          filters:
#            branches:
#              only:
#                - dev
#          requires:
#            - Ansible_Inventory_check
#            - slack/on-hold
#          type: approval
#      - Deployment_Directory:
#          filters:
#            branches:
#              only:
#                - dev
#          requires:
#            - pause_workflow
  slack-workflow-status:
    if: always()
    name: Post Workflow Status To Slack
    needs:
      - Ansible_Inventory_check
      - Deployment_Path_Selection
      - Git_Branch_Checkout
      - Git_Status_Check
      - Git_Diff_Check
      - Git_Pull
      - Git_Branch_Check
      - Deployment
      - Terraform_init
      - Terraform_plan
      - Terraform_apply
      - Terraform_Destroy
    runs-on: ubuntu-latest
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.DEPLOY_KEY}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
          # Optional Input
          channel: '#github-actions-pipeline-status.'
          name: 'Shashank Workflow Bot'
          icon_emoji: ':service_dog:'
          icon_url: 'https://avatars0.githubusercontent.com/u/1701160?s=96&v=4'
#  print:
#    name: Print
#    runs-on: ubuntu-latest
#    steps:
#      - name: Print Outputs
#        env:
#          slack_outputs: ${{ toJson(on.slack.outputs) }}
#        run: |
#         echo slack: $slack_outputs
#        continue-on-error: ${{ fromJSON(env.continue) }}
#        timeout-minutes: ${{ fromJSON(env.time) }}

#        - name: Delete workflow runs
#          uses: GitRML/delete-workflow-runs@main
#          with:
#            retain_days: 1
#            keep_minimum_runs: 1